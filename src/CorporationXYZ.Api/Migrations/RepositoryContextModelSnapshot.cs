// <auto-generated />
using System;
using CorporationXYZ.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CorporationXYZ.Main.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CorporationXYZ.Entities.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe617476-d8ee-4c41-b1c2-08dad1f7e9a4"),
                            ConcurrencyStamp = "2dd896b0-c892-47e2-9cd3-c98778a32017",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("668814e8-1eed-40ae-052b-08dad1fc717a"),
                            ConcurrencyStamp = "d517966c-cd1c-465a-b7f6-d916bdaf626e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("ba2cd64a-e1c6-4238-052c-08dad1fc717a"),
                            ConcurrencyStamp = "bdf1d534-b865-4562-94fc-5763f7896cb4",
                            Name = "Consumer",
                            NormalizedName = "CONSUMER"
                        });
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.AuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.BillingInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BillingInformation");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.ClientRateLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxRequestsPerMinute")
                        .HasColumnType("int");

                    b.Property<int>("MaxRequestsPerSecond")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClientRateLimit");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.ClientRateLimitPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClientRateLimitPolicies");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.PricingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxRequestsPerMinute")
                        .HasColumnType("int");

                    b.Property<int>("MaxRequestsPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PricingPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1431845e-b779-4310-8293-284b0727db41"),
                            Description = "Basic plan with limited usage",
                            MaxRequestsPerMinute = 2,
                            MaxRequestsPerMonth = 10,
                            Name = "Basic"
                        },
                        new
                        {
                            Id = new Guid("33269f38-6656-49f5-8c5e-e4efe71d8782"),
                            Description = "Standard plan for medium usage",
                            MaxRequestsPerMinute = 5,
                            MaxRequestsPerMonth = 50,
                            Name = "Standard"
                        },
                        new
                        {
                            Id = new Guid("23a92d2b-76dd-4bdd-80bb-02fb83cc1348"),
                            Description = "Premium plan for high usage",
                            MaxRequestsPerMinute = 10,
                            MaxRequestsPerMonth = 100,
                            Name = "Premium"
                        });
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.PricingPlanRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<Guid>("PricingPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PricingPlanId");

                    b.ToTable("PricingPlanRates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e928da80-0085-4dee-a19d-a10d6f42d0c1"),
                            NotificationType = 1,
                            PricingPlanId = new Guid("1431845e-b779-4310-8293-284b0727db41"),
                            Rate = 0.05m
                        },
                        new
                        {
                            Id = new Guid("0e81cf44-1589-4c16-819f-93a862f9441e"),
                            NotificationType = 2,
                            PricingPlanId = new Guid("1431845e-b779-4310-8293-284b0727db41"),
                            Rate = 0.01m
                        },
                        new
                        {
                            Id = new Guid("c055eec2-da47-4525-95df-7b4ec8255787"),
                            NotificationType = 1,
                            PricingPlanId = new Guid("33269f38-6656-49f5-8c5e-e4efe71d8782"),
                            Rate = 0.03m
                        },
                        new
                        {
                            Id = new Guid("4be2775e-a613-470b-b38a-5f48c4e33925"),
                            NotificationType = 2,
                            PricingPlanId = new Guid("33269f38-6656-49f5-8c5e-e4efe71d8782"),
                            Rate = 0.005m
                        },
                        new
                        {
                            Id = new Guid("3e3d0bb5-1d80-47d0-8243-3059c66a51fd"),
                            NotificationType = 1,
                            PricingPlanId = new Guid("23a92d2b-76dd-4bdd-80bb-02fb83cc1348"),
                            Rate = 0.02m
                        },
                        new
                        {
                            Id = new Guid("c663dc95-7133-45ca-b814-b9f47a53300f"),
                            NotificationType = 2,
                            PricingPlanId = new Guid("23a92d2b-76dd-4bdd-80bb-02fb83cc1348"),
                            Rate = 0.001m
                        });
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.Quota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxRequestsPerMonth")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Quota");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.UsageStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("RequestCount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UsageStatistics");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PricingPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PricingPlanId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.AuditTrail", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", "User")
                        .WithMany("AuditTrails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.BillingInformation", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", "User")
                        .WithOne("BillingInformation")
                        .HasForeignKey("CorporationXYZ.Entities.Models.BillingInformation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.ClientRateLimit", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.ClientRateLimitPolicy", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", "User")
                        .WithMany("RateLimitPolicies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.Notification", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.PricingPlanRate", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.PricingPlan", "PricingPlan")
                        .WithMany("PricingPlanRates")
                        .HasForeignKey("PricingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PricingPlan");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.Quota", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.UsageStatistics", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", "User")
                        .WithOne("UsageStatistics")
                        .HasForeignKey("CorporationXYZ.Entities.Models.UsageStatistics", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.User", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.PricingPlan", "PricingPlan")
                        .WithMany("Users")
                        .HasForeignKey("PricingPlanId");

                    b.Navigation("PricingPlan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorporationXYZ.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CorporationXYZ.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.PricingPlan", b =>
                {
                    b.Navigation("PricingPlanRates");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CorporationXYZ.Entities.Models.User", b =>
                {
                    b.Navigation("AuditTrails");

                    b.Navigation("BillingInformation");

                    b.Navigation("Notifications");

                    b.Navigation("RateLimitPolicies");

                    b.Navigation("UsageStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
